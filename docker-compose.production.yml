version: '3.8'

services:
  # PostgreSQL Database - Production Ready
  db:
    image: postgres:15-alpine
    container_name: openwebui-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-openwebui_prod}
      POSTGRES_USER: ${POSTGRES_USER:-openwebui_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_THIS_SECURE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-openwebui_user} -d ${POSTGRES_DB:-openwebui_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - openwebui-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache - Production Ready
  redis:
    image: redis:7-alpine
    container_name: openwebui-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - openwebui-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Ollama LLM Service - Production Ready
  ollama:
    image: ollama/ollama:latest
    container_name: openwebui-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_MODELS=/root/.ollama/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - openwebui-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 2G

  # Open WebUI - Production Ready
  openwebui:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USE_OLLAMA: "true"
        USE_CUDA: "false"
    container_name: openwebui-app
    volumes:
      - openwebui_data:/app/backend/data
      - ./logs:/app/logs
    ports:
      - "${OPEN_WEBUI_PORT:-8080}:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - DATA_DIR=/app/backend/data
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-true}
      - ENABLE_LOGIN_FORM=${ENABLE_LOGIN_FORM:-true}
      - ENABLE_WEB_SEARCH=${ENABLE_WEB_SEARCH:-true}
      - RAG_EMBEDDING_ENGINE=${RAG_EMBEDDING_ENGINE:-ollama}
      - CHUNK_SIZE=${CHUNK_SIZE:-1000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-100}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - openwebui-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Nginx Reverse Proxy with SSL Support
  nginx:
    image: nginx:alpine
    container_name: openwebui-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - openwebui
    restart: unless-stopped
    networks:
      - openwebui-network
    profiles:
      - production

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: openwebui-backup
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-openwebui_prod}
      - POSTGRES_USER=${POSTGRES_USER:-openwebui_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: /bin/sh -c "while true; do sleep 86400; /backup.sh; done"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - openwebui-network
    profiles:
      - backup

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: openwebui-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - openwebui-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: openwebui-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - openwebui-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  openwebui_data:
  prometheus_data:
  grafana_data:

networks:
  openwebui-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
